;;----------------------------------------------------------------------------------------------------------
;;TOC:
;;   1. description
;;   2. profiles
;;   3. devices
;;   4. froms
;;   5. tos
;;   6. templates
;;   7. applications
;;   8. layers
;;   9. simlayers
;;      9.1 shortcuts
;;      9.2 launchers
;;      9.3 home-row modifiers
;;   10. main
;;      10.1 layout rotation
;;      10.2 external keyboard settings
;;      10.3 simple modifications
;;      10.4 keyboard mouse
;;      10.5 hyper key settings
;;      10.6 shortcuts
;;          10.6.1 window management
;;          10.6.2 misc shortcuts & Spotify control
;;          10.6.3 markdown shortcuts
;;      10.7 launchers
;;          10.7.1 launch mode (frequently used apps)
;;          10.7.2 open mode (frequently used websites)
;;      10.8 home-row mods
;;      10.10 F-keys
;;
;;----------------------------------------------------------------------------------------------------------

;; DESCRIPTION
;; This is my karabiner setup on my personal MBA which has **Hungarian layout**, thus the strange combinations.
;; Special thanks to @nikitavoloboev, @ttscoff and @kiinoda.

    ;; !  | means mandatory -   modifier(s) alone when pressed change behavior
    ;; #  | means optional  -   modifiers are optional (but at least one necessary)

    ;; :!Ca is keycode :a and prefix a with !C

    ;; C  | left_command
    ;; T  | left_control
    ;; O  | left_option
    ;; S  | left_shift
    ;; F  | fn
    ;; Q  | right_command
    ;; W  | right_control
    ;; E  | right_option
    ;; R  | right_shift
    ;; P  | caps_lock

    ;; ## | optional any (this has no effect when used on the RHS; only LHS)
    ;; !! | command + control + optional + shift (hyper)

   ;; to understand better how modifiers work in karabiner
    ;; karabiner definition of mandatory and optional
    ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/from/modifiers/


    ;; need to prefix C T O S F with ! or #
    ;;
    ;; code for all this:
    ;; https://github.com/yqrashawn/GokuRakuJoudo/blob/b9b334a187379f9bc8182ad59e2cca2a1789e9c0/src/karabiner_configurator/keys.clj#L68

;;----------------------------------------------------------------------------------------------------------

{ ;;This curly bracket marks the beginning of the whole config.
;;Each section starts with a colon, the section's name and the section is bordered with curly brackets.

;; PROFILES
:profiles
 {:goku {:default true ;;"default true means" rules default goes into this rule if no profiles specified
         :sim 50
        ;; simultaneous key press threshold
        ;; simlayer is implemented with to_if_alone and simultaneous key press feature
         :delay 80
        ;; to_delayed_action_delay_milliseconds
        ;; checkout karabiner's documentation
        ;; https://pqrs.org/osx/karabiner/json.html
        ;; basically it means time after which the key press is count delayed
         :alone 120
        ;; https://pqrs.org/osx/karabiner/json.html#to-if-alone
        ;; to_if_alone_timeout_milliseconds
        ;; affects to_if_alone behavior
        ;; simlayer is implemented with to_if_alone and simultaneous key press feature
         :held 70
        ;; to_if_held_down_threshold_milliseconds
        ;; check the doc, I don't know what does this mean.
        ;; maybe press this many milliseconds counts a "held" ?
        }
 }

;;----------------------------------------------------------------------------------------------------------

;; DEVICES
:devices{
        :internal [{:vendor_id 1452 :product_id 657}]
        }

;;----------------------------------------------------------------------------------------------------------

;; FROMS
:froms {
        ;; aliases
        :delete {:key :delete_or_backspace}
        :return {:key :return_or_enter}
}

;;----------------------------------------------------------------------------------------------------------

;; TOS
;; Here we can define to-s, which I do not really use.
;; There are shortcuts for to-s in rules, like string to shell commands and multiple to definitions in vector.
;; You only need to use to definition if you want to use or set select_input_source, mouse_key, lazy, repeat, halt, hold_down_milliseconds.

 :tos {
        ;;:same_wind_app   {:key :grave_accent_and_tilde :modi [:left_command] :lazy true}
;;        :prev_app        {:key :tab :modi [:left_command] :lazy true}
;;        :left_paren      {:key :8 :modi [:left_shift] :lazy true}
;;        :right_paren     {:key :9 :modi [:left_shift] :lazy true}
;;        :home_dir        [{:key :grave_accent_and_tilde :modi [:left_shift] :lazy true} {:key :slash}]
;;        :regex_match_any [{:key :period} {:key :8 :modi [:left_shift] :lazy true}]
;;        :select_cn       {:select_input_source
;;                          {:input_mode_id   ""
;;                           :input_source_id "com.apple.keylayout.US"
;;                           :language        "en"}
;;                         }
;;        :select_abc      {:select_input_source
;;                          {:input_source_id "^com\\.apple\\.keylayout\\.ABC$"}
;;                         }
        ;; symbols
        ; :plus {:key :3 :modi :shift}
        ; :minus {:key :slash}
        ; :multiply {:key :comma :modi [:shift :option]}
        ; :divide {:key :6 :modi :shift}
      }

;;----------------------------------------------------------------------------------------------------------

;; TEMPLATES
;; When we use karabiner to run shell commands or applescripts, we write them as string.
;; The problem is these strings are often similar and really long. So there's predefined templates.
;; It's the same with those string templates in some programming languages.
;; In fact, it uses the clojure's string templates, which is actually java's string templates implementation.

:templates {
             :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :open "open \"%s\""
             :applescript "osascript '~/Library/Mobile Documents/com~apple~ScriptEditor2/Documents/%s'"
             :hs "open -g hammerspoon://%s"
             :launch "osascript -e 'tell application \"%s\" to activate'"
             :show "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
             :toggle "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
             :type "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
            }

;;----------------------------------------------------------------------------------------------------------

;; APPLICATIONS
;; Here we can define applications to use them as a condition.
:applications {
                ; :vscode ["^com.microsoft.VSCode$"]
                ; :safari ["^com\\.apple\\.Safari$"]
                ; :java ["^com.jetbrains.inteluflij.ce$"]
                :vimModeOn ["^com.microsoft.VSCode$" "^com.jetbrains.intellij.ce$"]
                ; :photos ["^com.apple.Photos$"]
                :obsidian ["^md.obsidian$"]
              }

;;----------------------------------------------------------------------------------------------------------

;; LAYERS
:layers {
          :mouse {:key :z :alone {:key :z}}
          :hyper {:key :caps_lock :alone {:key :escape}}
          :num {:key :tab}
          :symbols {:key :spacebar}  
        }

;;----------------------------------------------------------------------------------------------------------

;; SIMLAYERS
:simlayers {;
; *shortcuts
             :w-key {:key :w} ; window management
             :x-key {:key :x} ; misc
             :m-key {:key :m} ; markdown mode
             :F-keys {:key :comma}
; *launchers
             :launch-mode {:key :q} ; launch frequently used apps
             :o-key {:key :o} ; open websites
             :right_shift {:key :j}
           }

;;----------------------------------------------------------------------------------------------------------

;; MAIN
:main[

;; simple modifications
        {:des "right command to F13 (Alfred) if alone" :rules [[:##right_command :right_command nil {:alone :f13}]]}
        {:des "left_control → ctrl+tab if alone unless VSCode or IntelliJ is in front" :rules [:internal :!vimModeOn [:##left_control :left_control nil {:alone :!Ttab}]]} ; change application tabs
        {:des "left cmd → cmd+tab if alone" :rules [:internal [:##left_command :left_command nil {:alone :!Ctab}]]} ; change applications
        {:des "right option to opt + shift" :rules [[:##right_option :!Rright_option nil ]]}
        ;; the rarely use homerow mods and this config is not compatible with the spacebar mod
        ;{:des "homerow mods"
        ; :rules [
        ;         [:##a :left_control nil {:alone :a}]
        ;         [:##s :left_option nil {:alone :s}]
        ;         [:##d :left_command nil {:alone :d}]
        ;         [:##f :left_shift nil {:alone :f}]
        ;         ;;
        ;         [:##semicolon :right_control nil {:alone :semicolon}]
        ;         [:##l :right_option nil {:alone :l}]
        ;         [:##k :right_command nil {:alone :k}]
        ;         [:##j :right_shift nil {:alone :j}]
        ;        ]
        ;}

;; keyboard mouse
        {:des "mouse"
        :rules [:mouse
                [:j {:mkey {:y 1036}}]
                [:k {:mkey {:y -1036}}]
                [:h {:mkey {:x -1036}}]
                [:l {:mkey {:x 1036}}]
                [:n {:pkey :button1}]
                [:m {:pkey :button2}]
                ;TODO: button3
                ]
        }

;; hyper key settings
        {:des "hyper (caps_lock)"
         :rules [:hyper
                 ; *hyper navigation
                 [:##k :up_arrow]
                 [:##j :down_arrow]
                 [:##h :left_arrow]
                 [:##l :right_arrow]
                 [:##p :page_up]
                 [:##i :!Cleft_arrow]
                 [:##o :!Cright_arrow]
                 [:##u :page_down]
                 [:##a :return_or_enter]
                 [:quote :!Oleft_arrow] ; jump one word back (á on HUN keyboard)
                 [:backslash :!Oright_arrow] ; jump one word ahead (ű on HUN keyboard)
                 [:open_bracket :!SOleft_arrow] ; highlight/select previous word (ő on HUN keyboard)
                 [:close_bracket :!SOright_arrow] ; highlight/select next word (ú on HUN keyboard)
                 ; *hyper delete
                 [:n :!Odelete_or_backspace] ; delete previous word
                 [:m :delete_or_backspace] ; simple backspace
                 [:!Cn :!Cdelete_or_backspace] ; delete back to the beginning of the line
                 [:comma :delete_forward] ; delete forward
                 [:period :!Odelete_forward] ; delete next word
                 [:!Ccomma :!Cdelete_forward] ; delete to the end of the line
                 ; *hyper shortcuts
                 [:c :f19] ; Alfred clipboard history
                 [:q :!QWERs] ; Alfred search snippets
                 ; *app specific
                 [:t :!Wt :obsidian] ;;insert template in Obsidian
                 [:e :!We :obsidian] ; Omnisearch in Obsidian
                 ; [:b [:!SOcomma :!SOcomma :!SOz :f :o :n :t :spacebar :c :o :l :o :r :!S7 :!S2 :!SO3 :c :non_us_backslash :non_us_backslash :non_us_backslash :non_us_backslash :non_us_backslash :!S2 :!SOx :!SOz :!S6 :f :o :n :t :!SOx :!SOcomma :!SOcomma :left_arrow :left_arrow :left_arrow :left_arrow :left_arrow :left_arrow :left_arrow :left_arrow :left_arrow] :obsidian] ;bold & red font in Obsidian
                 ; [:b :type "**<font color="]
                 [:d :!Qp :obsidian] ;;command palette in Obsidian
                 [:s :!Qo :obsidian] ;;quick open in Obisidian
                ]
        }

{:des "symbols and numbers" 
         :rules [:symbols
                [:1 :!S1] ;'
                [:2 :!S2] ;"
                [:4 :!Oclose_bracket] ;~
                [:5 :!Obackslash] ;`
                [:7 :!SO3] ;#
                [:8 :!Oquote] ;^
                ;;
                [:tab :!Speriod] ;:
                [:q :!S5] ;%
                [:w :!O1] ;&
                [:e :!Scomma] ;?
                [:r :!S3] ;+
                [:t :!Oq] ;@
                [:y :!O4] ;$
                [:u :!Sslash] ;_
                [:i :!O8] ;[
                [:o :!O9] ;]
                [:p :!S4] ;!
                ;;;
                [:a :!S6] ;/
                [:s :!S8] ;(
                [:d :!S7] ;=
                [:f :non_us_backslash] ;0
                [:g :!O7] ;{
                [:h :!O0] ;}
                [:j :1]
                [:k :!SOcomma] ;*
                [:l :!S9] ;)
                [:semicolon :slash] ;-
                [:quote :!S2] ;"
                ;;;
                [:left_shift :!Operiod] ;; (not part of workmandead)
                [:z :6]
                [:x :7]
                [:c :8]
                [:v :9]
                [:b :!Ograve_accent_and_tilde] ;|
                [:n :!Ohyphen] ;\
                [:m :2]
                [:comma :3]
                [:period :4]
                [:slash :5]
         ]}

;; shortcuts
;;;; window management
        {:des "window management (w-key)"
         :rules [:w-key
                 ;; *system shortcuts  
                 ;; NOTE: you need to specify most of these keyboard shortcuts in System Preferences too
                 [:a :!CTOSh] ; tile window to left side of screen
                 [:d :!CTOSl] ; tile window to right side of screen
                 [:f :!CTf] ; toggle fullscreen 
                 [:t :!Ctab] ; change apps
                 ;;  [:!St :!CStab]
                 [:y :!Ch] ; hide app
                 [:q :!Cq] ; quit app
                 [:e :!Cw] ; close window
                 ;; *hammerspoon
                 [:m :!CTOm] ; maximize
                 [:c :!CTOc] ; center window
                 [:k :!CTOk] ; top half
                 [:j :!CTOj] ; bottom half
                 [:h :!CTOh] ; left half
                 [:l :!CTOl] ; right half
                 [:1 :!CTO1] ; maximize window to monitor 1
                 [:2 :!CTO2] ; maximize window to monitor 2
                 [:3 :!CTO3] ; maximize window to monitor 3
                 [:n :!CTOn] ; move window to next monitor
                 [:p :!CTOp] ; move window to previous monitor
                 [:r :!CTOo] ; switch to the next window
                 [:!Sr :!TOSo] ; switch to the previous window
                 [:s :!TOh] ;show keyboard hint for window switch
                 [:i :!Tleft_arrow] ;switch to left Workspace
                 [:o :!Tright_arrow] ;switch to right Workspace
                ]
        }

;;;; misc shortcuts & Spotify control
        {:des "x-key (misc)"
         :rules [:x-key
                ; shortcuts
                 [:b :!CTOSb] ; show/hide Bartender items
                 [:c :!Ff14] ; show control center by calling an Alfred shortcut
                 [:a :!Ff15] ; start new amphetamine session
                 [:s :!Ff17] ; search menubar with Alfred
                 [:n :!Ff18] ; toggle darkmode via Alfred shortcut
                ;;  [:k :!Ff19] ; change karabiner profile with Alfred
                 ;;;;;;;;;;;;;;;;;;;
                ; *Spotify
;;                 [:m :!CTSm] ; open Spotify playlist in Alfred mini player
;;                [:p :!CTSp] ;hs.spotify.play/pause
;;                 [:period :!CTSn] ;hs.spotify.next
;;                 [:comma :!CTSi] ;hs.spotify.previous
;;                 [:i :!CTSi] ;hs.spotify.volumeDown
;;                 [:o :!CTSo] ;hs.spotify.volumeUp
;;                 [:spacebar :!CTSspacebar] ;hs.spotify.displayCurrentTrack
                ]
        }

;;;; markdown shortcuts
        {:des "m-key (markdown)"
         :rules [:m-key
                 ; [:b [:type "****"] :left_arrow :left_arrow] ; bold
                 ; [:i [:type "**"] :left_arrow] ; italic
                 ; [:1 :type "# "]
                 ; [:2 :type "## "] ; heading 2
                 ; [:3 :type "### "] ; heading 3
                 ; [:4 :type "#### "] ; heading 4
                 ; [:5 :type "##### "] ; heading 5
                 ; [:s [:type "~~~~"] :left_arrow :left_arrow] ; striketrough
                 ; [:c :type "```"] ; code block
                ]
        }

;; launchers
;;;; launch mode (frequently used apps)
        {:des "q-key (launch mode)"
         :rules [:launch-mode
                 [:s [:toggle "Safari"]]
;;                 [:m [:toggle "Spotify"]]
                 [:f [:toggle "Finder"]]
                 [:c [:toggle "Calendar"]]
                 [:b [:launch "Firefox"]] ;;b for browser i guess
                 ; [:n [:toggle "Notes"]]
                 ; [:d [:toggle "Drafts"]]
                 [:w [:toggle "Obsidian"]]
                 [:e [:toggle "Mail"]]
;;                 [:t [:toggle "TickTick"]]
                 [:p [:toggle "Photos"]]
                 [:i [:toggle "Terminal"]]
                ;;  [:j [:toggle "IntelliJ IDEA CE"]]
                 ; [:v [:toggle "Visual Studio Code"]]
                ]
        }

;;;; open mode (frequently used websites)
        {:des "o-key (open websites)"
         :rules [:o-key
                 [:t [:open "https://telex.hu"]]
                 [:g [:open "https://github.com"]]
                ;;  [:u [:open "https://www.udemy.com"]]
                ]
        }

;; F-keys
        {:des "F-keys"
         :rules [:F-keys
                [:q :!Ff1]
                [:w :!Ff2]
                [:e :!Ff3]
                [:r :!Ff4]
                [:t :!Ff5]
                [:y :!Ff6]
                [:u :!Ff7]
                [:i :!Ff8]
                [:o :!Ff9]
                [:p :!Ff10]
                [:open_bracket :!Ff11]
                [:close_bracket :!Ff12]
                ]
        }
     ] ;; end of main
} ;; end of config
